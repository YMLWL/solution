---
import Layout from '../layouts/Layout.astro';
import { Image } from 'astro:assets';
import logo from '../assets/logo2x.png';
import '../styles/global.css'
---

<Layout>
  <div class="fixed inset-0 bg-gray-100 flex flex-col mx-auto h-full">
    <div class="flex-1 overflow-y-auto">
      <div class="max-w-sm mx-auto p-4 space-y-6">
        <div class="flex items-center gap-3 mb-6">
          <Image src={logo} alt="FoodieBot Logo" class="w-12" />
          <h1 class="text-xl font-semibold">Preferensi Makanan</h1>
        </div>

        <!-- Food Search -->
        <div class="space-y-4">
          <h3 class="text-lg font-medium text-gray-800">Makanan yang dicari</h3>
          <input
            type="text"
            id="foodSearch"
            placeholder="Contoh: Nasi Goreng, Sate, dll"
            class="w-full rounded-full px-6 py-2 border-2 border-gray-300 text-gray-600 bg-white focus:outline-none focus:border-green-600 cursor-pointer"
          />
        </div>

        <!-- Food Type Selection -->
        <div class="space-y-4">
          <h3 class="text-lg font-medium text-gray-800">Lagi pengen makan apa aja?</h3>
          <div class="flex flex-wrap gap-3" id="foodTypes">
            {["Manis", "Asin", "Pedas", "Gurih"].map((type) => (
              <button
                class="rounded-full px-6 py-2 border-2 border-gray-300 text-gray-600 bg-white hover:bg-gray-50 cursor-pointer"
                data-type={type}
              >
                {type}
              </button>
            ))}
          </div>
        </div>

        <!-- People Count -->
        <div class="space-y-4">
          <h3 class="text-lg font-medium text-gray-800">Jumlah orang</h3>
          <div class="flex flex-wrap gap-3" id="peopleCount">
            {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "10+"].map((count) => (
              <button
                class="rounded-full px-4 py-2 border-2 border-gray-300 text-gray-600 bg-white hover:bg-gray-50 min-w-[50px] cursor-pointer"
                data-count={count}
              >
                {count}
              </button>
            ))}
          </div>
        </div>

        <!-- Budget Selection -->
        <div class="space-y-4">
          <h3 class="text-lg font-medium text-gray-800">Total budget kamu berapa?</h3>
          <div class="flex flex-wrap gap-3" id="budgetRange">
            {[
              { label: "< Rp50.000", value: "50000" },
              { label: "Rp50.000 - Rp100.000", value: "100000" },
              { label: "Rp100.000 - Rp250.000", value: "250000" },
              { label: "Rp250.000 - Rp500.000", value: "500000" },
              { label: "> Rp500.000", value: "500000+" }
            ].map((budget) => (
              <button
                class="rounded-full px-4 py-2 border-2 border-gray-300 text-gray-600 bg-white hover:bg-gray-50 cursor-pointer"
                data-budget={budget.value}
              >
                {budget.label}
              </button>
            ))}
          </div>
          <div class="mt-2">
            <input
              type="number"
              id="customBudget"
              placeholder="Atau masukkan budget spesifik (Rp)"
              class="w-full rounded-full px-6 py-2 border-2 border-gray-300 text-gray-600 bg-white focus:outline-none focus:border-green-600 cursor-pointer"
            />
          </div>
        </div>

        <!-- Submit Button -->
        <button 
          id="submitPreferences"
          class="w-full bg-green-600 hover:bg-green-700 text-white rounded-full py-4 text-lg font-medium mt-8 cursor-pointer"
        >
          Lihat Rekomendasi
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  let selectedTypes: string[] = [];
  let selectedPeople: string | number = "";
  let selectedBudget: string = "";
  let searchedFood: string = "";
  let userLatitude: number | null = null;
  let userLongitude: number | null = null;

  // Get user location
  if ("geolocation" in navigator) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        userLatitude = position.coords.latitude;
        userLongitude = position.coords.longitude;
      },
      (error) => {
        console.error("Error getting location:", error);
      }
    );
  }

  // Helper function to update button states
  function updateButtonStates(container: string, button: HTMLButtonElement, isMultiSelect = false) {
    const buttons = document.querySelectorAll(`#${container} button`);
    if (!isMultiSelect) {
      buttons.forEach(btn => {
        btn.classList.remove('border-green-600', 'text-green-600', 'bg-green-50');
        btn.classList.add('border-gray-300', 'text-gray-600', 'bg-white');
      });
    }
    button.classList.remove('border-gray-300', 'text-gray-600', 'bg-white');
    button.classList.add('border-green-600', 'text-green-600', 'bg-green-50');
  }

  // Food search input
  const foodSearchInput = document.getElementById('foodSearch') as HTMLInputElement;
  foodSearchInput?.addEventListener('input', (e) => {
    searchedFood = (e.target as HTMLInputElement).value;
  });

  // Custom budget input
  const customBudgetInput = document.getElementById('customBudget') as HTMLInputElement;
  customBudgetInput?.addEventListener('input', (e) => {
    selectedBudget = (e.target as HTMLInputElement).value;
    // Clear any selected budget buttons
    document.querySelectorAll('#budgetRange button').forEach(btn => {
      btn.classList.remove('border-green-600', 'text-green-600', 'bg-green-50');
      btn.classList.add('border-gray-300', 'text-gray-600', 'bg-white');
    });
  });

  // Food type selection (multi-select)
  document.querySelectorAll('#foodTypes button').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      const type = target.dataset.type as string;
      
      if (target.classList.contains('border-green-600')) {
        // Deselect
        selectedTypes = selectedTypes.filter(t => t !== type);
        target.classList.remove('border-green-600', 'text-green-600', 'bg-green-50');
        target.classList.add('border-gray-300', 'text-gray-600', 'bg-white');
      } else {
        // Select
        selectedTypes.push(type);
        updateButtonStates('foodTypes', target, true);
      }
    });
  });

  // People count selection
  document.querySelectorAll('#peopleCount button').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      selectedPeople = target.dataset.count || "";
      updateButtonStates('peopleCount', target);
    });
  });

  // Budget selection
  document.querySelectorAll('#budgetRange button').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      selectedBudget = target.dataset.budget || "";
      updateButtonStates('budgetRange', target);
      // Clear custom budget input
      if (customBudgetInput) customBudgetInput.value = '';
    });
  });

  // Submit preferences and redirect to chat
  document.getElementById('submitPreferences')?.addEventListener('click', () => {
    if (!searchedFood && selectedTypes.length === 0 && !selectedPeople && !selectedBudget) {
      alert('Mohon isi minimal satu preferensi makanan');
      return;
    }

    // Create the display message (without location)
    const displayMessage = `Cariin gue ${searchedFood ? `"${searchedFood}"` : ''} atau yang lainnya sejenis itu tapi ${selectedTypes.join(', ')} dengan budget sekitar ${selectedBudget} untuk ${selectedPeople} orang, tolong ya`

    // Create the full message for API (including location)
    const apiMessage = `${displayMessage}${
      userLatitude && userLongitude ? `\n- Location: ${userLatitude},${userLongitude}` : ''}`.trim();

    console.log('Storing messages:', { display: displayMessage, api: apiMessage }); // Debug log
    
    // Store both messages in sessionStorage
    sessionStorage.setItem('displayMessage', displayMessage);
    sessionStorage.setItem('initialMessage', apiMessage);
    
    // Verify storage
    const storedApiMessage = sessionStorage.getItem('initialMessage');
    console.log('Verified stored message:', storedApiMessage); // Debug log
    
    if (storedApiMessage) {
      // Redirect to chat page
      window.location.href = '/chat';
    } else {
      alert('Terjadi kesalahan dalam menyimpan preferensi. Silakan coba lagi.');
    }
  });
</script>
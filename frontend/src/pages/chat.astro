---
import ChatHeader from '../components/ChatHeader.astro';
import ReceivedMessage from '../components/ReceivedMessage.astro';
import SentMessage from '../components/SentMessage.astro';
import MessageInput from '../components/MessageInput.astro';
import Layout from '../layouts/Layout.astro';
import './src/styles/global.css'
---

<Layout>
  <div class="fixed inset-0 bg-gray-100 flex flex-col mx-auto h-full">
    <ChatHeader />
    <div class="flex-1 overflow-y-auto" id="messageContainer">
      <div class="flex justify-start">
        <div class="m-4 bg-gray-200 text-gray-800 rounded-2xl rounded-tl-md px-4 py-3 max-w-xs whitespace-pre-line">
          <div class="text-sm">Hai! Saya FoodieBot, asisten virtual yang siap membantu kamu menemukan makanan enak, cepat & hemat. Ada yang bisa saya bantu?</div>
          <div class="text-xs text-gray-500 mt-1">{new Date().toLocaleTimeString()}</div>
        </div>
      </div>
    </div>
    <MessageInput />
  </div>
</Layout>

<script>
  const API_BASE_URL = 'https://08a0-2a09-bac5-3a22-137d-00-1f1-1fb.ngrok-free.app';
  const messageContainer = document.getElementById('messageContainer');
  const messageForm = document.querySelector('.fixed.bottom-0 form') || document.querySelector('.fixed.bottom-0');
  const messageInput = document.querySelector('input[placeholder="Ketik pesan..."]') as HTMLInputElement;
  const sendButton = document.querySelector('button:has(.lucide-send-horizontal)');

  if (!messageContainer || !messageInput) {
    console.error('Required DOM elements not found');
    throw new Error('Required DOM elements not found');
  }

  const safeMessageContainer = messageContainer;

  // Function to get a cookie value
  function getCookie(name: string): string | null {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
    return null;
  }

  // Function to set a cookie
  function setCookie(name: string, value: string, days: number) {
    const expires = new Date();
    expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
    document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
  }

  // Get session ID and user ID from cookies
  let sessionId = getCookie('foodiebot_session_id') || '';
  let userId = getCookie('foodiebot_user_id') || 'test2405';

  // Get session ID from URL or create new session
  async function initializeSession() {
    if (!sessionId) {
      try {
        const response = await fetch(`${API_BASE_URL}/apps/food_agent/users/${userId}/sessions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({})
        });
        const data = await response.json();
        sessionId = data.id;
        setCookie('foodiebot_session_id', sessionId, 7);
        setCookie('foodiebot_user_id', userId, 7);
      } catch (error) {
        console.error('Error creating session:', error);
      }
    }
  }

  // Add a message to the UI using the SentMessage and ReceivedMessage components styling
  function addMessage(content: string, isUser = false) {
    const messageDiv = document.createElement('div');
    if (isUser) {
      messageDiv.innerHTML = `
        <div class="flex justify-end">
          <div class="m-2 bg-[#03870C] text-white rounded-2xl rounded-tr-md px-4 py-3 max-w-xs">
            <div class="text-sm">${content}</div>
            <div class="text-xs opacity-75 mt-1 flex items-center gap-1">
              ${new Date().toLocaleTimeString()}
              <svg class="w-3 h-3" viewBox="0 0 24 24" fill="currentColor">
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" />
              </svg>
            </div>
          </div>
        </div>
      `;
    } else {
      messageDiv.innerHTML = `
        <div class="flex justify-start">
          <div class="m-4 bg-gray-200 text-gray-800 rounded-2xl rounded-tl-md px-4 py-3 max-w-xs whitespace-pre-line">
            <div class="text-sm">${content}</div>
            <div class="text-xs text-gray-500 mt-1">${new Date().toLocaleTimeString()}</div>
          </div>
        </div>
      `;
    }
    safeMessageContainer.appendChild(messageDiv);
    safeMessageContainer.scrollTop = safeMessageContainer.scrollHeight;
  }

  // Add loading spinner
  function addSpinner() {
    const spinnerDiv = document.createElement('div');
    spinnerDiv.id = 'spinner';
    spinnerDiv.className = 'flex justify-start';
    spinnerDiv.innerHTML = `
      <div class="m-4 flex items-center space-x-2">
        <div class="w-3 h-3 bg-gray-300 rounded-full animate-bounce"></div>
        <div class="w-3 h-3 bg-gray-300 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
        <div class="w-3 h-3 bg-gray-300 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
      </div>
    `;
    safeMessageContainer.appendChild(spinnerDiv);
    safeMessageContainer.scrollTop = safeMessageContainer.scrollHeight;
  }

  function removeSpinner() {
    const spinner = document.getElementById('spinner');
    if (spinner) {
      spinner.remove();
    }
  }

  // Handle message sending
  async function handleSendMessage() {
    const message = messageInput.value.trim();
    if (!message || !sessionId) return;

    // Add user message to UI
    addMessage(message, true);
    messageInput.value = '';

    // Add loading spinner
    addSpinner();

    try {
      const response = await fetch(`${API_BASE_URL}/run_sse`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          appName: 'food_agent',
          userId: userId,
          sessionId: sessionId,
          newMessage: {
            role: 'user',
            parts: [{ text: message }]
          },
          streaming: true
        })
      });

      if (!response.body) {
        throw new Error('Response body is null');
      }

      const reader = response.body.getReader();
      let completeResponse = '';

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        // Convert the Uint8Array to text
        const chunk = new TextDecoder().decode(value);
        completeResponse += chunk;
      }

      // Process the complete response
      const events = completeResponse.split('\n\n').filter(Boolean);
      let finalMessage = '';
      
      for (const event of events) {
        if (event.startsWith('data: ')) {
          const jsonData = JSON.parse(event.slice(6));
          if (jsonData.content && jsonData.content.parts && jsonData.content.parts[0].text) {
            finalMessage = jsonData.content.parts[0].text;
          }
        }
      }

      removeSpinner();
      if (finalMessage) {
        addMessage(finalMessage);
      }

    } catch (error) {
      console.error('Error sending message:', error);
      removeSpinner();
      addMessage('Sorry, there was an error processing your message.');
    }
  }

  // Handle form submission
  if (messageForm) {
    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      handleSendMessage();
    });
  }

  // Handle send button click
  if (sendButton) {
    sendButton.addEventListener('click', (e) => {
      e.preventDefault();
      handleSendMessage();
    });
  }

  // Handle Enter key
  messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  });

  // Initialize the session when the page loads
  initializeSession();
</script>
---
import ChatHeader from '../components/ChatHeader.astro';
import ReceivedMessage from '../components/ReceivedMessage.astro';
import SentMessage from '../components/SentMessage.astro';
import MessageInput from '../components/MessageInput.astro';
import FoodCard from '../components/FoodCard.astro';
import RestaurantCard from '../components/RestaurantCard.astro';
import Layout from '../layouts/Layout.astro';
import '../styles/global.css'
---

<Layout>
  <div class="fixed inset-0 bg-gray-100 flex flex-col mx-auto h-full">
    <ChatHeader />
    <div class="flex-1 overflow-y-auto pb-24" id="messageContainer">
      <div class="flex justify-start">
        <div class="m-4 bg-gray-200 text-gray-800 rounded-2xl rounded-tl-md px-4 py-3 max-w-xs whitespace-pre-line">
          <div class="text-sm">Hai! Saya FoodieBot, asisten virtual yang siap membantu kamu menemukan makanan enak, cepat & hemat. Ada yang bisa saya bantu?</div>
          <div class="text-xs text-gray-500 mt-1">{new Date().toLocaleTimeString()}</div>
        </div>
      </div>
    </div>
    <MessageInput />
  </div>
</Layout>

<script>
  const API_BASE_URL = 'http://149.129.240.125:8000';
  const messageContainer = document.getElementById('messageContainer');
  const messageForm = document.querySelector('.fixed.bottom-0 form') || document.querySelector('.fixed.bottom-0');
  const messageInput = document.querySelector('input[placeholder="Ketik pesan..."]') as HTMLInputElement;
  const sendButton = document.querySelector('button:has(.lucide-send-horizontal)');

  if (!messageContainer || !messageInput) {
    console.error('Required DOM elements not found');
    throw new Error('Required DOM elements not found');
  }

  const safeMessageContainer = messageContainer;

  // Function to get a cookie value
  function getCookie(name: string): string | null {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
    return null;
  }

  // Function to set a cookie
  function setCookie(name: string, value: string, days: number) {
    const expires = new Date();
    expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
    document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
  }

  // Get session ID and user ID from cookies
  let sessionId = getCookie('foodiebot_session_id') || '';
  let userId = getCookie('foodiebot_user_id') || 'test2505';

  // Get session ID from URL or create new session
  async function initializeSession() {
    if (!sessionId) {
      try {
        const response = await fetch(`${API_BASE_URL}/apps/food_agent/users/${userId}/sessions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({})
        });
        const data = await response.json();
        sessionId = data.id;
        setCookie('foodiebot_session_id', sessionId, 7);
        setCookie('foodiebot_user_id', userId, 7);
      } catch (error) {
        console.error('Error creating session:', error);
      }
    }
  }

  interface FoodItem {
    name: string;
    distance: string;
    review: {
      average: number;
      total: number;
    };
    location: string;
    image: string;
    link: string;
    price: number;
  }

  interface FoodResponse {
    message: string;
    data: FoodItem[];
    type: 'foodBeverage';
    closingMessage: string;
  }

  interface RestaurantItem {
    uid: string;
    name: string;
    distance: number;
    review: {
      average: number;
      total: number;
    };
    rating: number;
    location?: string;
    image: string;
    link: string;
  }

  interface RestaurantResponse {
    message: string;
    data: RestaurantItem[];
    type: 'restaurant';
    closingMessage: string;
  }

  interface ExtractedItem {
    name: string;
    distance: string;
    review: {
      average: number;
      total: number;
    };
    location: string;
    image: string;
    link: string;
    price: number;
  }

  // Function to clean JSON string from markdown code blocks
  function cleanJsonString(content: string): string {
    return content
      .replace(/```json\s*/, '') // Remove ```json at start
      .replace(/\s*```\s*$/, '') // Remove ``` at end
      .trim();
  }

  // Function to detect if content contains JSON using regex
  function isJsonResponse(content: string): boolean {
    // Remove code block markers first
    const cleanContent = content.replace(/```json\s*|\s*```/g, '').trim();
    
    // Regex patterns to detect JSON structures
    const jsonPatterns = [
      /^\s*\{.*"data"\s*:\s*\[.*\].*\}\s*$/s, // Complete JSON object with data array
      /^\s*\{.*"type"\s*:\s*["'](?:foodBeverage|restaurant)["'].*\}\s*$/s, // JSON with type field
      /^\s*\{.*"message"\s*:.*"data"\s*:.*\}\s*$/s, // JSON with message and data
      /^\s*\{[^{}]*"name"\s*:.*"distance"\s*:.*\}\s*$/s // Single item JSON
    ];
    
    return jsonPatterns.some(pattern => pattern.test(cleanContent));
  }

  // Function to attempt JSON repair for common issues
  function repairJson(jsonString: string): string {
    let repaired = jsonString;
    
    // Remove markdown code blocks
    repaired = repaired.replace(/```json\s*|\s*```/g, '').trim();
    
    // Fix common JSON formatting issues
    repaired = repaired
      // Fix missing commas between objects
      .replace(/}\s*{/g, '},{')
      // Fix missing commas between properties
      .replace(/"\s*:\s*([^,}\]]+)\s*"/g, '": $1,"')
      // Fix trailing commas before closing brackets
      .replace(/,\s*([}\]])/g, '$1')
      // Fix missing quotes around property names
      .replace(/([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '$1"$2":')
      // Fix missing brackets for arrays
      .replace(/"data"\s*:\s*([^[{])/g, '"data": [$1')
      // Ensure proper array closing
      .replace(/,\s*"type"/g, '],"type"');
    
    // Try to ensure it starts and ends properly
    if (!repaired.startsWith('{')) {
      repaired = '{' + repaired;
    }
    if (!repaired.endsWith('}')) {
      repaired = repaired + '}';
    }
    
    return repaired;
  }

  // Enhanced function to extract structured data from malformed JSON
  function extractDataFromMalformedJson(content: string): FoodResponse | RestaurantResponse | null {
    const cleanContent = content.replace(/```json\s*|\s*```/g, '').trim();
    
    try {
      // Try to extract individual items using regex
      const items: ExtractedItem[] = [];
      
      // Pattern to match food/restaurant items
      const itemPattern = /"name"\s*:\s*"([^"]+)"[^}]*"distance"\s*:\s*"([^"]+)"[^}]*(?:"review"\s*:\s*\{[^}]*"average"\s*:\s*([^,}]+)[^}]*"total"\s*:\s*([^}]+)\})?[^}]*(?:"location"\s*:\s*"([^"]+)")?[^}]*(?:"image"\s*:\s*"([^"]+)")?[^}]*(?:"link"\s*:\s*"([^"]+)")?[^}]*(?:"price"\s*:\s*([^,}]+))?/g;
      
      let match;
      while ((match = itemPattern.exec(cleanContent)) !== null) {
        const item: ExtractedItem = {
          name: match[1] || '',
          distance: match[2] || '',
          review: {
            average: parseFloat(match[3]) || 0,
            total: parseInt(match[4]) || 0
          },
          location: match[5] || '',
          image: match[6] || '',
          link: match[7] || '',
          price: parseInt(match[8]) || 0
        };
        items.push(item);
      }
      
      // Extract message and type
      const messageMatch = cleanContent.match(/"message"\s*:\s*"([^"]+)"/);
      const typeMatch = cleanContent.match(/"type"\s*:\s*"([^"]+)"/);
      const closingMessageMatch = cleanContent.match(/"closingMessage"\s*:\s*"([^"]+)"/);
      
      const type = typeMatch ? typeMatch[1] as 'foodBeverage' | 'restaurant' : 'foodBeverage';
      
      if (type === 'restaurant') {
        return {
          message: messageMatch ? messageMatch[1] : '',
          data: items.map(item => ({
            uid: '', // Default empty UID for extracted data
            name: item.name,
            distance: parseFloat(item.distance) || 0,
            review: item.review,
            rating: item.review.average,
            location: item.location,
            image: item.image,
            link: item.link
          })),
          type: 'restaurant',
          closingMessage: closingMessageMatch ? closingMessageMatch[1] : ''
        } as RestaurantResponse;
      } else {
        return {
          message: messageMatch ? messageMatch[1] : '',
          data: items.map(item => ({
            name: item.name,
            distance: item.distance,
            review: item.review,
            location: item.location,
            image: item.image,
            link: item.link,
            price: item.price
          })),
          type: 'foodBeverage',
          closingMessage: closingMessageMatch ? closingMessageMatch[1] : ''
        } as FoodResponse;
      }
    } catch (error) {
      console.error('Error extracting data from malformed JSON:', error);
      return null;
    }
  }

  // Function to handle food recommendation response
  function handleFoodResponse(content: string) {
    console.log('Processing response:', content); // Debug log
    try {
      const cleanContent = cleanJsonString(content);
      console.log('Cleaned content:', cleanContent); // Debug log
      const response = JSON.parse(cleanContent) as FoodResponse | RestaurantResponse;
      console.log('Parsed response:', response); // Debug log
      
      // Display initial message if present
      if (response.message) {
        addMessage(response.message);
      }

      // Add spinner
      addSpinner();

      // Process each item
      if (response.data && Array.isArray(response.data)) {
        response.data.forEach((item: FoodItem | RestaurantItem) => {
          const cardDiv = document.createElement('div');
          cardDiv.className = 'flex justify-start m-4';

          if (response.type === 'restaurant') {
            const restaurant = item as RestaurantItem;
            cardDiv.innerHTML = `
              <div class="max-w-sm w-3/4">
                <div class="bg-white rounded-2xl overflow-hidden shadow-lg">
                  <div class="relative">
                    <img src="${restaurant.image || '/placeholder-restaurant.jpg'}" alt="${restaurant.name}" class="w-full h-48 object-cover" />
                  </div>
                  <div class="p-4 space-y-4">
                    <div class="flex items-center gap-4 text-sm">
                      <div class="flex items-center gap-1">
                        <svg class="w-4 h-4 fill-orange-500 text-orange-500" viewBox="0 0 24 24">
                          <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                        </svg>
                        <span class="font-medium text-gray-800">${restaurant.rating || restaurant.review?.average || 0}</span>
                        <span class="text-gray-500">(${restaurant.review?.total || 0}+)</span>
                      </div>
                      <span class="text-gray-500">${restaurant.distance}</span>
                    </div>
                    <h2 class="text-xl font-semibold text-gray-800 leading-tight">${restaurant.name}</h2>
                    <div class="space-y-2">
                      <div class="flex justify-between items-center">
                        <span class="text-gray-600">${restaurant.location || ''}</span>
                      </div>
                    </div>
                    ${restaurant.link ? `
                      <a href="${restaurant.link}" target="_blank" class="block">
                        <button class="w-full bg-white border-2 cursor-pointer border-green-600 text-green-600 hover:bg-green-50 rounded-full py-3 font-medium text-base">
                          Lihat Detail
                        </button>
                      </a>
                    ` : ''}
                  </div>
                </div>
              </div>
            `;
          } else {
            const food = item as FoodItem;
            cardDiv.innerHTML = `
              <div class="max-w-sm w-3/4">
                <div class="bg-white rounded-2xl overflow-hidden shadow-lg">
                  <div class="relative">
                    <img src="${food.image || '/placeholder-food.jpg'}" alt="${food.name}" class="w-full h-48 object-cover" />
                  </div>
                  <div class="p-4 space-y-4">
                    <div class="flex items-center gap-4 text-sm">
                      <div class="flex items-center gap-1">
                        <svg class="w-4 h-4 fill-orange-500 text-orange-500" viewBox="0 0 24 24">
                          <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                        </svg>
                        <span class="font-medium text-gray-800">${food.review?.average || 0}</span>
                        <span class="text-gray-500">(${food.review?.total || 0}+)</span>
                      </div>
                      <span class="text-gray-500">${food.distance}</span>
                    </div>
                    <h2 class="text-xl font-semibold text-gray-800 leading-tight">${food.name}</h2>
                    <div class="space-y-2">
                      <div class="flex justify-between items-center">
                        <span class="text-gray-600">${food.location || ''}</span>
                      </div>
                      <div class="text-gray-800 font-medium">Rp${food.price.toLocaleString('id-ID')}</div>
                    </div>
                    ${food.link ? `
                      <a href="${food.link}" target="_blank" class="block">
                        <button class="w-full bg-white border-2 cursor-pointer border-green-600 text-green-600 hover:bg-green-50 rounded-full py-3 font-medium text-base">
                          Lihat Detail
                        </button>
                      </a>
                    ` : ''}
                  </div>
                </div>
              </div>
            `;
          }

          safeMessageContainer.appendChild(cardDiv);
          safeMessageContainer.scrollTop = safeMessageContainer.scrollHeight;
        });

        // Remove spinner after all cards are added
        removeSpinner();

        // Add closing message immediately after cards
        if (response.closingMessage) {
          addMessage(response.closingMessage);
        }
      }
    } catch (error) {
      console.error('Error parsing response:', error);
      removeSpinner();
      addMessage(content);
    }
  }

  // Modified addMessage function
  function addMessage(content: string, isUser = false) {
    const messageDiv = document.createElement('div');
    if (isUser) {
      messageDiv.innerHTML = `
        <div class="flex justify-end">
          <div class="m-2 bg-[#03870C] text-white rounded-2xl rounded-tr-md px-4 py-3 max-w-xs">
            <div class="text-sm">${content}</div>
            <div class="text-xs opacity-75 mt-1 flex items-center gap-1">
              ${new Date().toLocaleTimeString()}
              <svg class="w-3 h-3" viewBox="0 0 24 24" fill="currentColor">
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z" />
              </svg>
            </div>
          </div>
        </div>
      `;
    } else {
      // Check if the content is a JSON string containing recommendations
      if (content.trim().startsWith('```json') || (content.trim().startsWith('{') && content.includes('"data"') && content.includes('"type"'))) {
        handleFoodResponse(content);
        return;
      }

      messageDiv.innerHTML = `
        <div class="flex justify-start">
          <div class="m-4 bg-gray-200 text-gray-800 rounded-2xl rounded-tl-md px-4 py-3 max-w-xs whitespace-pre-line">
            <div class="text-sm">${content}</div>
            <div class="text-xs text-gray-500 mt-1">${new Date().toLocaleTimeString()}</div>
          </div>
        </div>
      `;
    }
    
    safeMessageContainer.appendChild(messageDiv);
    safeMessageContainer.scrollTop = safeMessageContainer.scrollHeight;
  }

  // Add loading spinner
  function addSpinner() {
    const spinnerDiv = document.createElement('div');
    spinnerDiv.id = 'spinner';
    spinnerDiv.className = 'flex justify-start';
    spinnerDiv.innerHTML = `
      <div class="m-4 flex items-center space-x-2">
        <div class="w-3 h-3 bg-gray-300 rounded-full animate-bounce"></div>
        <div class="w-3 h-3 bg-gray-300 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
        <div class="w-3 h-3 bg-gray-300 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
      </div>
    `;
    safeMessageContainer.appendChild(spinnerDiv);
    safeMessageContainer.scrollTop = safeMessageContainer.scrollHeight;
  }

  function removeSpinner() {
    const spinner = document.getElementById('spinner');
    if (spinner) {
      spinner.remove();
    }
  }

  // Handle message sending
  async function handleSendMessage() {
    var message = messageInput.value.trim();
    if (!message || !sessionId) return;

    // Add user message to UI
    addMessage(message, true);
    messageInput.value = '';

    // Add loading spinner
    addSpinner();

    try {
      // Get location data from cookies
      const latitude = getCookie('foodiebot_latitude');
      const longitude = getCookie('foodiebot_longitude');
      const province = getCookie('foodiebot_province');
      const city = getCookie('foodiebot_city');
      const kecamatan = getCookie('foodiebot_kecamatan');

      // Create location string only if we have valid data
      let locationString = '';
      if (latitude && longitude && !isNaN(parseFloat(latitude)) && !isNaN(parseFloat(longitude))) {
        locationString = `[LOCATION_COORDS=${parseFloat(latitude)},${parseFloat(longitude)}]`;
      }
      if (city && kecamatan) {
        // Convert to lowercase and replace spaces with hyphens for API compatibility
        const formattedCity = city.toLowerCase().replace(/\s+/g, '-');
        const formattedKecamatan = kecamatan.toLowerCase().replace(/\s+/g, '-');
        locationString += ` [LOCATION_AREA=${formattedCity},${formattedKecamatan}]`;
      }

      // Append location to message if available, add lat & lon too
      const messageWithLocation = locationString ? `${message} ${locationString} [LOCATION_COORDS=${latitude},${longitude}]` : message;

      const response = await fetch(`${API_BASE_URL}/run_sse`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'text/event-stream'
        },
        body: JSON.stringify({
          appName: 'food_agent',
          userId: userId,
          sessionId: sessionId,
          newMessage: {
            role: 'user',
            parts: [{ 
              text: messageWithLocation,
            }]
          },
          streaming: false
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error('Response body reader could not be created');
      }

      let currentMessageDiv: HTMLDivElement | null = null;
      let jsonBuffer = '';
      let textBuffer = '';

      const processJsonResponse = (jsonText: string) => {
        removeSpinner();
        try {
          handleFoodResponse(jsonText);
          jsonBuffer = ''; // Reset buffer after processing
        } catch (error) {
          console.error('Error processing JSON response:', error);
          addMessage('Sorry, there was an error processing the recommendations.');
        }
      };

      const processTextResponse = (text: string) => {
        if (!currentMessageDiv) {
          removeSpinner();
          currentMessageDiv = document.createElement('div');
          currentMessageDiv.className = 'flex justify-start';
          currentMessageDiv.innerHTML = `
            <div class="m-4 bg-gray-200 text-gray-800 rounded-2xl rounded-tl-md px-4 py-3 max-w-xs whitespace-pre-line">
              <div class="text-sm"></div>
              <div class="text-xs text-gray-500 mt-1">${new Date().toLocaleTimeString()}</div>
            </div>
          `;
          safeMessageContainer.appendChild(currentMessageDiv);
        }

        const textDiv = currentMessageDiv.querySelector('.text-sm');
        if (textDiv) {
          textDiv.textContent = text;
          safeMessageContainer.scrollTop = safeMessageContainer.scrollHeight;
        }
      };

      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          // Process any remaining data in buffers
          if (jsonBuffer) {
            processJsonResponse(jsonBuffer);
          } else if (textBuffer) {
            processTextResponse(textBuffer);
          }
          break;
        }

        const chunk = new TextDecoder().decode(value);
        const events = chunk.split('\n\n').filter(Boolean);

        for (const event of events) {
          if (!event.startsWith('data: ')) continue;

          try {
            const jsonData = JSON.parse(event.slice(6));
            const text = jsonData.content?.parts?.[0]?.text;
            if (!text) continue;

            // Check if it's a JSON response
            if (text.trim().startsWith('{') || text.trim().startsWith('```json')) {
              jsonBuffer += text;
              // Try to process JSON immediately if it seems complete
              if ((text.includes('"type"') && text.includes('"data"')) || text.endsWith('```')) {
                processJsonResponse(jsonBuffer);
              }
            } else {
              // Handle regular text
              textBuffer += text;
              processTextResponse(textBuffer);
            }
          } catch (error) {
            console.error('Error processing event:', error);
          }
        }
      }

    } catch (error) {
      console.error('Error sending message:', error);
      removeSpinner();
      addMessage('Sorry, there was an error processing your message.');
    }
  }

  // Handle form submission
  if (messageForm) {
    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      handleSendMessage();
    });
  }

  // Handle send button click
  if (sendButton) {
    sendButton.addEventListener('click', (e) => {
      e.preventDefault();
      handleSendMessage();
    });
  }

  // Handle Enter key
  messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  });

  // Initialize the session when the page loads
  initializeSession();
</script>